---
# tasks file for nginx

# Setup/install tasks
- name: Add PPA for Nginx
  apt_repository:
    repo: 'ppa:nginx/{{ nginx_ppa_version }}'
    state: present
    update_cache: yes

- name: Ensure nginx is installed
  apt:
    name: "{{ nginx_package_name }}"
    state: present

# Nginx configuration
- name: Copy nginx configuration in place
  template:
    src: nginx.conf.j2
    dest: /etc/nginx/nginx.conf
    owner: root
    group: root
    mode: 0644
  notify: reload nginx

- name: Copy fastcgi_params
  template:
    src: fastcgi_params.j2
    dest: /etc/nginx/fastcgi_params

# Vhost configuration.
- name: Remove default nginx vhost
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent
  notify: restart nginx

- name: Ensure nginx_vhost_path exists
  file:
    path: "{{ nginx_vhost_path }}"
    state: directory
  notify: reload nginx

- name: Add managed vhost config files
  template:
    src: "{{ item.template|default(nginx_vhost_template) }}"
    dest: "{{ nginx_vhost_path }}/{{ item.filename|default(item.server_name.split(' ')[0] ~ '.conf') }}"
    force: yes
    owner: root
    group: root
    mode: 0644
  when: item.state|default('present') != 'absent'
  with_items: "{{ nginx_vhosts }}"
  notify: reload nginx

- name: Remove legacy vhosts.conf file
  file:
    path: "{{ nginx_vhost_path }}/vhosts.conf"
    state: absent
  notify: reload nginx

# Enable Nginx
- name: Ensure nginx is started and enabled to start at boot
  service:
    name: nginx
    state: started
    enabled: yes

###

- name: Configure the nginx APT key
  apt_key: url=http://nginx.org/keys/nginx_signing.key
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '14.04'

- name: Configure the nginx APT repositories
  apt_repository: repo="deb http://nginx.org/packages/{{ ansible_distribution | lower }}/ {{ ansible_distribution_release }} nginx"
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '14.04'

- name: Install the nginx packages
  apt: name=nginx state=latest

- name: Remove the default configuration
  file: path={{ item }} state=absent
  with_items :
    - /etc/nginx/conf.d/default.conf
    - /etc/nginx/conf.d/example_ssl.conf

- name: Configure nginx user
  lineinfile: dest=/etc/nginx/nginx.conf regexp="^{{ item.param }}" line="{{ item.param }} {{ item.value }};"
  with_items :
    - { param: user, value: "{{ nginx.run_as }}" }

- name: Copy fastcgi params
  copy: src="fastcgi_params" dest="/etc/nginx/fastcgi_params"

- name: "Ensure nginx is {{ nginx.start | ternary('started','stopped') }}"
  service: name=nginx state={{ nginx.start | ternary('restarted','stopped') }} enabled={{ nginx.service_enabled }}

- name: Add nginx vhosts
  template: src={{ item.template }}.j2 dest="/etc/nginx/conf.d/vhost-{{ item.vhost }}.conf"
  with_items: "{{ vhosts }}"
  register: nginx_phpfpm_confs
  notify: Restart nginx

- name: Clean /etc/hosts file
  replace: dest=/etc/hosts regexp=".* \# nginx vhost\n" replace=""

- name: Build /etc/hosts file
  lineinfile: dest=/etc/hosts regexp=".*{{ item.vhost }} \# nginx vhost$" line="127.0.0.1   {{ item.vhost }} {{ '#' }} nginx vhost" state=present
  with_items: "{{ vhosts }}"

- name: List nginx vhosts
  set_fact:
    nginx_confs: "{{ nginx_phpfpm_confs.results|selectattr('dest', 'string')|map(attribute='dest')|list + nginx_phpfpm_confs.results|selectattr('path', 'string')|map(attribute='path')|select|list }}"
  when: nginx_phpfpm_confs

- name: List nginx configs
  shell: ls -1 /etc/nginx/conf.d/vhost-*.conf
  register: ls_contents
  when: nginx_phpfpm_confs
  failed_when: false
  changed_when: false

- name: Remove old confs
  file: path="{{ item }}" state=absent
  with_items: ls_contents.stdout_lines
  when: nginx_phpfpm_confs and item not in nginx_confs

- name: "Ensure nginx is {{ nginx.start | ternary('started','stopped') }}"
  service: name=nginx state={{ nginx.start | ternary('restarted','stopped') }} enabled={{ nginx.service_enabled }}
